C Program
-----------------
int main()
{
    int a, b, c;
    b = (a + c + b) * (c + a);
    return b;
}


SSA Output
------------------
;; Function main (main, funcdef_no=0, decl_uid=1792, cgraph_uid=0, symbol_order=0)

main ()
{
  int c;
  int b;
  int a;
  int _1;
  int _2;
  int _3;
  int _8;

  <bb 2> [0.00%]:
  _1 = a_4(D) + c_5(D);
  _2 = b_6(D) + _1;
  _3 = c_5(D) + a_4(D);
  b_7 = _2 * _3;
  _8 = b_7;
  return _8;

}


FRE Output
------------------
;; Function main (main, funcdef_no=0, decl_uid=1792, cgraph_uid=0, symbol_order=0)

main ()
{
  int c;
  int b;
  int a;
  int _1;
  int _2;

  <bb 2> [0.00%]:
  _1 = a_4(D) + c_5(D);
  _2 = _1 + b_6(D);
  b_7 = _1 * _2;
  return b_7;

}



Solutions
--------------
				1	The original code showed two computations, but the FRE pass was able to  reuse the  temporary variable  which  stored the  result of  the intitial computation  of (a +  c). Thus,  one line of  execution was saved, and so was the use of an extra variable.
				
				2	Check  the   file  B-4.c.*.optimized.   This  is  the   last  GIMPLE intra-procedural pass. If  it is same as the output  of FRE, then no more optimizations have occured.
				
				3	"return  b" was  required to  make the  computation of  variable 'b' meaningful. If function  'main' is going to "return 0"  and there is no other  output, GCC  will realise that  the entire  computation of variable 'b' was  dead code and will eliminate  its dependencies one by one until the resulting program reduces to:
        
                int main()
                {
                    return 0;
                }